(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{DeP4:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* unused harmony export initialResolution */\n/* unused harmony export hash */\n/* unused harmony export pointToTile */\n/* unused harmony export pointToTileFraction */\n/* unused harmony export bboxToCenter */\n/* unused harmony export lngLatToMeters */\n/* unused harmony export metersToLngLat */\n/* unused harmony export metersToPixels */\n/* unused harmony export lngLatToTile */\n/* unused harmony export lngLatToGoogle */\n/* unused harmony export metersToTile */\n/* unused harmony export pixelsToMeters */\n/* unused harmony export pixelsToTile */\n/* unused harmony export tileToBBoxMeters */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return tileToBBox; });\n/* unused harmony export googleToBBoxMeters */\n/* unused harmony export googleToBBox */\n/* unused harmony export tileToGoogle */\n/* unused harmony export googleToTile */\n/* unused harmony export googleToQuadkey */\n/* unused harmony export tileToQuadkey */\n/* unused harmony export quadkeyToTile */\n/* unused harmony export quadkeyToGoogle */\n/* unused harmony export bboxToMeters */\n/* unused harmony export validateTile */\n/* unused harmony export wrapTile */\n/* unused harmony export validateZoom */\n/* unused harmony export validateLngLat */\n/* unused harmony export resolution */\n/* unused harmony export range */\n/* unused harmony export maxBBox */\n/* unused harmony export validTile */\n/* unused harmony export latitude */\n/* unused harmony export longitude */\n/* unused harmony export bboxToTile */\nvar originShift = 2 * Math.PI * 6378137 / 2.0\nvar d2r = Math.PI / 180\n\nfunction initialResolution (tileSize) {\n  tileSize = tileSize || 256\n  return 2 * Math.PI * 6378137 / tileSize\n}\n\n/**\n * Hash tile for unique id key\n *\n * @param {Tile} tile [x, y, z]\n * @returns {number} hash\n * @example\n * var id = globalMercator.hash([312, 480, 4])\n * //=5728\n */\nfunction hash (tile) {\n  var x = tile[0]\n  var y = tile[1]\n  var z = tile[2]\n  return (1 << z) * ((1 << z) + x) + y\n}\n\n/**\n * Get the tile for a point at a specified zoom level\n * https://github.com/mapbox/tilebelt\n *\n * @param {[number, number]} lnglat [Longitude, Latitude]\n * @param {number} zoom Zoom level\n * @param {boolean} [validate=true] validates LatLng coordinates\n * @returns {Google} Google (XYZ) Tile\n * @example\n * var tile = globalMercator.pointToTile([1, 1], 12)\n * //= [ 2059, 2036, 12 ]\n */\nfunction pointToTile (lnglat, zoom, validate) {\n  var tile = pointToTileFraction(lnglat, zoom, validate)\n  tile[0] = Math.floor(tile[0])\n  tile[1] = Math.floor(tile[1])\n  return tile\n}\n\n/**\n * Get the precise fractional tile location for a point at a zoom level\n * https://github.com/mapbox/tilebelt\n *\n * @name pointToTileFraction\n * @param {[number, number]} lnglat [Longitude, Latitude]\n * @param {number} zoom Zoom level\n * @param {boolean} [validate=true] validates LatLng coordinates\n * @returns {Google} Google (XYZ) Tile\n * @example\n * var tile = globalMercator.pointToTileFraction([1, 1], 12)\n * //= [ 2059.3777777777777, 2036.6216445333432, 12 ]\n */\nfunction pointToTileFraction (lnglat, zoom, validate) {\n  // lnglat = validateLngLat(lnglat, validate)\n  var z = zoom\n  var lon = longitude(lnglat[0])\n  var lat = latitude(lnglat[1])\n  var sin = Math.sin(lat * d2r)\n  var z2 = Math.pow(2, z)\n  var x = z2 * (lon / 360 + 0.5)\n  var y = z2 * (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI)\n  return validateTile([x, y, z], validate)\n}\n\n/**\n * Converts BBox to Center\n *\n * @param {BBox} bbox - [west, south, east, north] coordinates\n * @return {LngLat} center\n * @example\n * var center = globalMercator.bboxToCenter([90, -45, 85, -50])\n * //= [ 87.5, -47.5 ]\n */\nfunction bboxToCenter (bbox) {\n  var west = bbox[0]\n  var south = bbox[1]\n  var east = bbox[2]\n  var north = bbox[3]\n  var lng = (west - east) / 2 + east\n  var lat = (south - north) / 2 + north\n  lng = Number(lng.toFixed(6))\n  lat = Number(lat.toFixed(6))\n  return [lng, lat]\n}\n\n/**\n * Converts LngLat coordinates to Meters coordinates.\n *\n * @param {[number, number]} lnglat [Longitude, Latitude]\n * @param {boolean} [validate=true] validates LatLng coordinates\n * @returns {Meters} Meters coordinates\n * @example\n * var meters = globalMercator.lngLatToMeters([126, 37])\n * //=[ 14026255.8, 4439106.7 ]\n */\nfunction lngLatToMeters (lnglat, validate) {\n  lnglat = validateLngLat(lnglat, validate)\n  var lng = lnglat[0]\n  var lat = lnglat[1]\n  var x = lng * originShift / 180.0\n  var y = Math.log(Math.tan((90 + lat) * Math.PI / 360.0)) / (Math.PI / 180.0)\n  y = y * originShift / 180.0\n  x = Number(x.toFixed(1))\n  y = Number(y.toFixed(1))\n  return [x, y]\n}\n\n/**\n * Converts Meters coordinates to LngLat coordinates.\n *\n * @param {Meters} meters Meters in Mercator [x, y]\n * @returns {LngLat} LngLat coordinates\n * @example\n * var lnglat = globalMercator.metersToLngLat([14026255, 4439106])\n * //=[ 126, 37 ]\n */\nfunction metersToLngLat (meters) {\n  var x = meters[0]\n  var y = meters[1]\n  var lng = (x / originShift) * 180.0\n  var lat = (y / originShift) * 180.0\n  lat = 180 / Math.PI * (2 * Math.atan(Math.exp(lat * Math.PI / 180.0)) - Math.PI / 2.0)\n  lng = Number(lng.toFixed(6))\n  lat = Number(lat.toFixed(6))\n  return [lng, lat]\n}\n\n/**\n * Converts Meters coordinates to Pixels coordinates.\n *\n * @param {Meters} meters Meters in Mercator [x, y]\n * @param {number} zoom Zoom level\n * @param {number} [tileSize=256] Tile size\n * @returns {Pixels} Pixels coordinates\n * @example\n * var pixels = globalMercator.metersToPixels([14026255, 4439106], 13)\n * //=[ 1782579.1, 1280877.3, 13 ]\n */\nfunction metersToPixels (meters, zoom, tileSize) {\n  var x = meters[0]\n  var y = meters[1]\n  var res = resolution(zoom, tileSize)\n  var px = (x + originShift) / res\n  var py = (y + originShift) / res\n  return [px, py, zoom]\n}\n\n/**\n * Converts LngLat coordinates to TMS Tile.\n *\n * @param {[number, number]} lnglat [Longitude, Latitude]\n * @param {number} zoom Zoom level\n * @param {boolean} [validate=true] validates LatLng coordinates\n * @returns {Tile} TMS Tile\n * @example\n * var tile = globalMercator.lngLatToTile([126, 37], 13)\n * //=[ 6963, 5003, 13 ]\n */\nfunction lngLatToTile (lnglat, zoom, validate) {\n  lnglat = validateLngLat(lnglat, validate)\n  var meters = lngLatToMeters(lnglat)\n  var pixels = metersToPixels(meters, zoom)\n  return pixelsToTile(pixels)\n}\n\n/**\n * Converts LngLat coordinates to Google (XYZ) Tile.\n *\n * @param {[number, number]} lnglat [Longitude, Latitude]\n * @param {number} zoom Zoom level\n * @param {boolean} [validate=true] validates LatLng coordinates\n * @returns {Google} Google (XYZ) Tile\n * @example\n * var google = globalMercator.lngLatToGoogle([126, 37], 13)\n * //=[ 6963, 3188, 13 ]\n */\nfunction lngLatToGoogle (lnglat, zoom, validate) {\n  lnglat = validateLngLat(lnglat, validate)\n\n  if (zoom === 0) {\n    return [0, 0, 0]\n  }\n  var tile = lngLatToTile(lnglat, zoom)\n  return tileToGoogle(tile)\n}\n\n/**\n * Converts Meters coordinates to TMS Tile.\n *\n * @param {Meters} meters Meters in Mercator [x, y]\n * @param {number} zoom Zoom level\n * @returns {Tile} TMS Tile\n * @example\n * var tile = globalMercator.metersToTile([14026255, 4439106], 13)\n * //=[ 6963, 5003, 13 ]\n */\nfunction metersToTile (meters, zoom) {\n  if (zoom === 0) {\n    return [0, 0, 0]\n  }\n  var pixels = metersToPixels(meters, zoom)\n  return pixelsToTile(pixels)\n}\n\n/**\n * Converts Pixels coordinates to Meters coordinates.\n *\n * @param {Pixels} pixels Pixels [x, y, zoom]\n * @param {number} [tileSize=256] Tile size\n * @returns {Meters} Meters coordinates\n * @example\n * var meters = globalMercator.pixelsToMeters([1782579, 1280877, 13])\n * //=[ 14026252.0, 4439099.5 ]\n */\nfunction pixelsToMeters (pixels, tileSize) {\n  var px = pixels[0]\n  var py = pixels[1]\n  var zoom = pixels[2]\n  var res = resolution(zoom, tileSize)\n  var mx = px * res - originShift\n  var my = py * res - originShift\n  mx = Number(mx.toFixed(1))\n  my = Number(my.toFixed(1))\n  return [mx, my]\n}\n\n/**\n * Converts Pixels coordinates to TMS Tile.\n *\n * @param {Pixels} pixels Pixels [x, y, zoom]\n * @param {number} [tileSize=256] Tile size\n * @param {boolean} [validate=true] validates Pixels coordinates\n * @returns {Tile} TMS Tile\n * @example\n * var tile = globalMercator.pixelsToTile([1782579, 1280877, 13])\n * //=[ 6963, 5003, 13 ]\n */\nfunction pixelsToTile (pixels, tileSize, validate) {\n  tileSize = tileSize || 256\n  var px = pixels[0]\n  var py = pixels[1]\n  var zoom = pixels[2]\n  if (zoom === 0) return [0, 0, 0]\n\n  validateZoom(zoom, validate)\n  var tx = Math.ceil(px / tileSize) - 1\n  var ty = Math.ceil(py / tileSize) - 1\n  if (tx < 0) tx = 0\n  if (ty < 0) ty = 0\n  return [tx, ty, zoom]\n}\n\n/**\n * Converts TMS Tile to bbox in Meters coordinates.\n *\n * @param {Tile} tile Tile [x, y, zoom]\n * @param {number} x TMS Tile X\n * @param {number} y TMS Tile Y\n * @param {number} zoom Zoom level\n * @param {number} [tileSize=256] Tile size\n * @param {boolean} [validate=true] validates Tile\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var bbox = globalMercator.tileToBBoxMeters([6963, 5003, 13])\n * //=[ 14025277.4, 4437016.6, 14030169.4, 4441908.5 ]\n */\nfunction tileToBBoxMeters (tile, tileSize, validate) {\n  validateTile(tile, validate)\n\n  tileSize = tileSize || 256\n  var tx = tile[0]\n  var ty = tile[1]\n  var zoom = tile[2]\n  var min = pixelsToMeters([tx * tileSize, ty * tileSize, zoom])\n  var max = pixelsToMeters([(tx + 1) * tileSize, (ty + 1) * tileSize, zoom])\n  return [min[0], min[1], max[0], max[1]]\n}\n\n/**\n * Converts TMS Tile to bbox in LngLat coordinates.\n *\n * @param {Tile} tile Tile [x, y, zoom]\n * @param {number} x TMS Tile X\n * @param {number} y TMS Tile Y\n * @param {number} zoom Zoom level\n * @param {boolean} [validate=true] validates Tile\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var bbox = globalMercator.tileToBBox([6963, 5003, 13])\n * //=[ 125.991, 36.985, 126.035, 37.020 ]\n */\nfunction tileToBBox (tile, validate) {\n  validateTile(tile, validate)\n\n  var tx = tile[0]\n  var ty = tile[1]\n  var zoom = tile[2]\n  if (zoom === 0) {\n    return [-180, -85.051129, 180, 85.051129]\n  }\n  var bbox = tileToBBoxMeters([tx, ty, zoom])\n  var mx1 = bbox[0]\n  var my1 = bbox[1]\n  var mx2 = bbox[2]\n  var my2 = bbox[3]\n  var min = metersToLngLat([mx1, my1, zoom])\n  var max = metersToLngLat([mx2, my2, zoom])\n  return [min[0], min[1], max[0], max[1]]\n}\n\n/**\n * Converts Google (XYZ) Tile to bbox in Meters coordinates.\n *\n * @param {Google} google Google [x, y, zoom]\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var bbox = globalMercator.googleToBBoxMeters([6963, 3188, 13])\n * //=[ 14025277.4, 4437016.6, 14030169.4, 4441908.5 ]\n */\nfunction googleToBBoxMeters (google) {\n  var Tile = googleToTile(google)\n  return tileToBBoxMeters(Tile)\n}\n\n/**\n * Converts Google (XYZ) Tile to bbox in LngLat coordinates.\n *\n * @param {Google} google Google [x, y, zoom]\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var bbox = globalMercator.googleToBBox([6963, 3188, 13])\n * //=[ 125.991, 36.985, 126.035, 37.020 ]\n */\nfunction googleToBBox (google) {\n  var Tile = googleToTile(google)\n  return tileToBBox(Tile)\n}\n\n/**\n * Converts TMS Tile to Google (XYZ) Tile.\n *\n * @param {Tile} tile Tile [x, y, zoom]\n * @param {boolean} [validate=true] validates Tile\n * @returns {Google} Google (XYZ) Tile\n * @example\n * var google = globalMercator.tileToGoogle([6963, 5003, 13])\n * //=[ 6963, 3188, 13 ]\n */\nfunction tileToGoogle (tile, validate) {\n  validateTile(tile, validate)\n\n  var tx = tile[0]\n  var ty = tile[1]\n  var zoom = tile[2]\n  if (zoom === 0) {\n    return [0, 0, 0]\n  }\n  var x = tx\n  var y = (Math.pow(2, zoom) - 1) - ty\n  return [x, y, zoom]\n}\n\n/**\n * Converts Google (XYZ) Tile to TMS Tile.\n *\n * @param {Google} google Google [x, y, zoom]\n * @returns {Tile} TMS Tile\n * @example\n * var tile = globalMercator.googleToTile([6963, 3188, 13])\n * //=[ 6963, 5003, 13 ]\n */\nfunction googleToTile (google) {\n  var x = google[0]\n  var y = google[1]\n  var zoom = google[2]\n  var tx = x\n  var ty = Math.pow(2, zoom) - y - 1\n  return [tx, ty, zoom]\n}\n\n/**\n * Converts Google (XYZ) Tile to Quadkey.\n *\n * @param {Google} google Google [x, y, zoom]\n * @returns {string} Microsoft's Quadkey schema\n * @example\n * var quadkey = globalMercator.googleToQuadkey([6963, 3188, 13])\n * //='1321102330211'\n */\nfunction googleToQuadkey (google) {\n  var Tile = googleToTile(google)\n  return tileToQuadkey(Tile)\n}\n\n/**\n * Converts TMS Tile to QuadKey.\n *\n * @param {Tile} tile Tile [x, y, zoom]\n * @param {boolean} [validate=true] validates Tile\n * @returns {string} Microsoft's Quadkey schema\n * @example\n * var quadkey = globalMercator.tileToQuadkey([6963, 5003, 13])\n * //='1321102330211'\n */\nfunction tileToQuadkey (tile, validate) {\n  validateTile(tile, validate)\n\n  var tx = tile[0]\n  var ty = tile[1]\n  var zoom = tile[2]\n  // Zoom 0 does not exist for Quadkey\n  if (zoom === 0) {\n    return ''\n  }\n  var quadkey = ''\n  ty = (Math.pow(2, zoom) - 1) - ty\n  range(zoom, 0, -1).map(function (i) {\n    var digit = 0\n    var mask = 1 << (i - 1)\n    if ((tx & mask) !== 0) {\n      digit += 1\n    }\n    if ((ty & mask) !== 0) {\n      digit += 2\n    }\n    quadkey = quadkey.concat(digit)\n  })\n  return quadkey\n}\n\n/**\n * Converts Quadkey to TMS Tile.\n *\n * @param {string} quadkey Microsoft's Quadkey schema\n * @returns {Tile} TMS Tile\n * @example\n * var tile = globalMercator.quadkeyToTile('1321102330211')\n * //=[ 6963, 5003, 13 ]\n */\nfunction quadkeyToTile (quadkey) {\n  var Google = quadkeyToGoogle(quadkey)\n  return googleToTile(Google)\n}\n\n/**\n * Converts Quadkey to Google (XYZ) Tile.\n *\n * @param {string} quadkey Microsoft's Quadkey schema\n * @returns {Google} Google (XYZ) Tile\n * @example\n * var google = globalMercator.quadkeyToGoogle('1321102330211')\n * //=[ 6963, 3188, 13 ]\n */\nfunction quadkeyToGoogle (quadkey) {\n  var x = 0\n  var y = 0\n  var zoom = quadkey.length\n  range(zoom, 0, -1).map(function (i) {\n    var mask = 1 << (i - 1)\n    switch (parseInt(quadkey[zoom - i], 0)) {\n      case 0:\n        break\n      case 1:\n        x += mask\n        break\n      case 2:\n        y += mask\n        break\n      case 3:\n        x += mask\n        y += mask\n        break\n      default:\n        throw new Error('Invalid Quadkey digit sequence')\n    }\n  })\n  return [x, y, zoom]\n}\n\n/**\n * Converts BBox from LngLat coordinates to Meters coordinates\n *\n * @param {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var meters = globalMercator.bboxToMeters([ 125, 35, 127, 37 ])\n * //=[ 13914936.3, 4163881.1, 14137575.3, 4439106.7 ]\n */\nfunction bboxToMeters (bbox) {\n  var min = lngLatToMeters([bbox[0], bbox[1]])\n  var max = lngLatToMeters([bbox[2], bbox[3]])\n  return [min[0], min[1], max[0], max[1]]\n}\n\n/**\n * Validates TMS Tile.\n *\n * @param {Tile} tile Tile [x, y, zoom]\n * @param {boolean} [validate=true] validates Tile\n * @throws {Error} Will throw an error if TMS Tile is not valid.\n * @returns {Tile} TMS Tile\n * @example\n * globalMercator.validateTile([60, 80, 12])\n * //=[60, 80, 12]\n * globalMercator.validateTile([60, -43, 5])\n * //= Error: Tile <y> must not be less than 0\n * globalMercator.validateTile([25, 60, 3])\n * //= Error: Illegal parameters for tile\n */\nfunction validateTile (tile, validate) {\n  var tx = tile[0]\n  var ty = tile[1]\n  var zoom = tile[2]\n  if (validate === false) return tile\n  if (zoom === undefined || zoom === null) throw new Error('<zoom> is required')\n  if (tx === undefined || tx === null) throw new Error('<x> is required')\n  if (ty === undefined || ty === null) throw new Error('<y> is required')\n\n  // Adjust values of tiles to fit within tile scheme\n  zoom = validateZoom(zoom)\n  tile = wrapTile(tile)\n\n  // // Check to see if tile is valid based on the zoom level\n  // // Currently impossible to hit since WrapTile handles this error\n  // // will keep this test commented out in case it doesnt handle it\n  // var maxCount = Math.pow(2, zoom)\n  // if (tile[0] >= maxCount || tile[1] >= maxCount) throw new Error('Illegal parameters for tile')\n  return tile\n}\n\n/**\n * Wrap Tile -- Handles tiles which crosses the 180th meridian or 90th parallel\n *\n * @param {[number, number, number]} tile Tile\n * @param {number} zoom Zoom Level\n * @returns {[number, number, number]} Wrapped Tile\n * @example\n * globalMercator.wrapTile([0, 3, 2])\n * //= [0, 3, 2] -- Valid Tile X\n * globalMercator.wrapTile([4, 2, 2])\n * //= [0, 2, 2] -- Tile 4 does not exist, wrap around to TileX=0\n */\nfunction wrapTile (tile) {\n  var tx = tile[0]\n  var ty = tile[1]\n  var zoom = tile[2]\n\n  // Maximum tile allowed\n  // zoom 0 => 1\n  // zoom 1 => 2\n  // zoom 2 => 4\n  // zoom 3 => 8\n  var maxTile = Math.pow(2, zoom)\n\n  // Handle Tile X\n  tx = tx % maxTile\n  if (tx < 0) tx = tx + maxTile\n\n  return [tx, ty, zoom]\n}\n\n/**\n * Validates Zoom level\n *\n * @param {number} zoom Zoom level\n * @param {boolean} [validate=true] validates Zoom level\n * @throws {Error} Will throw an error if zoom is not valid.\n * @returns {number} zoom Zoom level\n * @example\n * globalMercator.validateZoom(12)\n * //=12\n * globalMercator.validateZoom(-4)\n * //= Error: <zoom> cannot be less than 0\n * globalMercator.validateZoom(32)\n * //= Error: <zoom> cannot be greater than 30\n */\nfunction validateZoom (zoom) {\n  if (zoom === false) return zoom\n  if (zoom === undefined || zoom === null) { throw new Error('<zoom> is required') }\n  if (zoom < 0) { throw new Error('<zoom> cannot be less than 0') }\n  if (zoom > 32) { throw new Error('<zoom> cannot be greater than 32') }\n  return zoom\n}\n\n/**\n * Validates LngLat coordinates\n *\n * @param {[number, number]} lnglat [Longitude, Latitude]\n * @param {boolean} [validate=true] validates LatLng coordinates\n * @throws {Error} Will throw an error if LngLat is not valid.\n * @returns {LngLat} LngLat coordinates\n * @example\n * globalMercator.validateLngLat([-115, 44])\n * //= [ -115, 44 ]\n * globalMercator.validateLngLat([-225, 44])\n * //= Error: LngLat [lng] must be within -180 to 180 degrees\n */\nfunction validateLngLat (lnglat, validate) {\n  if (validate === false) return lnglat\n\n  var lng = longitude(lnglat[0])\n  var lat = latitude(lnglat[1])\n\n  // Global Mercator does not support latitudes within 85 to 90 degrees\n  if (lat > 85) lat = 85\n  if (lat < -85) lat = -85\n  return [lng, lat]\n}\n\n/**\n * Retrieve resolution based on zoom level\n *\n * @private\n * @param {number} zoom zoom level\n * @param {number} [tileSize=256] Tile size\n * @returns {number} resolution\n * @example\n * var res = globalMercator.resolution(13)\n * //=19.109257071294063\n */\nfunction resolution (zoom, tileSize) {\n  return initialResolution(tileSize) / Math.pow(2, zoom)\n}\n\n/**\n * Generate an integer Array containing an arithmetic progression.\n *\n * @private\n * @param {number} [start=0] Start\n * @param {number} stop Stop\n * @param {number} [step=1] Step\n * @returns {number[]} range\n * @example\n * globalMercator.range(3)\n * //=[ 0, 1, 2 ]\n * globalMercator.range(3, 6)\n * //=[ 3, 4, 5 ]\n * globalMercator.range(6, 3, -1)\n * //=[ 6, 5, 4 ]\n */\nfunction range (start, stop, step) {\n  if (stop == null) {\n    stop = start || 0\n    start = 0\n  }\n  if (!step) {\n    step = stop < start ? -1 : 1\n  }\n  var length = Math.max(Math.ceil((stop - start) / step), 0)\n  var range = Array(length)\n  for (var idx = 0; idx < length; idx++, start += step) {\n    range[idx] = start\n  }\n  return range\n}\n\n/**\n * Maximum extent of BBox\n *\n * @param {BBox|BBox[]} array BBox [west, south, east, north]\n * @returns {BBox} Maximum BBox\n * @example\n * var bbox = globalMercator.maxBBox([[-20, -30, 20, 30], [-110, -30, 120, 80]])\n * //=[-110, -30, 120, 80]\n */\nfunction maxBBox (array) {\n  if (!array) throw new Error('array is required')\n\n  // Single BBox\n  if (array && array[0] && array.length === 4 && array[0][0] === undefined) {\n    return array\n  }\n\n  // Multiple BBox\n  if (array && array[0] && array[0][0] !== undefined) {\n    var west = array[0][0]\n    var south = array[0][1]\n    var east = array[0][2]\n    var north = array[0][3]\n\n    array.map(function (bbox) {\n      if (bbox[0] < west) { west = bbox[0] }\n      if (bbox[1] < south) { south = bbox[1] }\n      if (bbox[2] > east) { east = bbox[2] }\n      if (bbox[3] > north) { north = bbox[3] }\n    })\n    return [west, south, east, north]\n  }\n}\n\n/**\n * Valid TMS Tile\n *\n * @param {Tile} tile Tile [x, y, zoom]\n * @returns {boolean} valid tile true/false\n * @example\n * globalMercator.validTile([60, 80, 12])\n * //= true\n * globalMercator.validTile([60, -43, 5])\n * //= false\n * globalMercator.validTile([25, 60, 3])\n * //= false\n */\nfunction validTile (tile) {\n  try {\n    validateTile(tile)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * Modifies a Latitude to fit within +/-90 degrees.\n *\n * @param {number} lat latitude to modify\n * @returns {number} modified latitude\n * @example\n * globalMercator.latitude(100)\n * //= -80\n */\nfunction latitude (lat) {\n  if (lat === undefined || lat === null) throw new Error('lat is required')\n\n  // Latitudes cannot extends beyond +/-90 degrees\n  if (lat > 90 || lat < -90) {\n    lat = lat % 180\n    if (lat > 90) lat = -180 + lat\n    if (lat < -90) lat = 180 + lat\n    if (lat === 0) lat = 0\n  }\n  return lat\n}\n\n/**\n * Modifies a Longitude to fit within +/-180 degrees.\n *\n * @param {number} lng longitude to modify\n * @returns {number} modified longitude\n * @example\n * globalMercator.longitude(190)\n * //= -170\n */\nfunction longitude (lng) {\n  if (lng === undefined || lng === null) throw new Error('lng is required')\n\n  // lngitudes cannot extends beyond +/-90 degrees\n  if (lng > 180 || lng < -180) {\n    lng = lng % 360\n    if (lng > 180) lng = -360 + lng\n    if (lng < -180) lng = 360 + lng\n    if (lng === 0) lng = 0\n  }\n  return lng\n}\n\n/**\n * Get the smallest tile to cover a bbox\n *\n * @param {Array<number>} bbox BBox\n * @returns {Array<number>} tile Tile\n * @example\n * var tile = bboxToTile([-178, 84, -177, 85])\n * //=tile\n */\nfunction bboxToTile (bboxCoords) {\n  var min = pointToTile([bboxCoords[0], bboxCoords[1]], 32)\n  var max = pointToTile([bboxCoords[2], bboxCoords[3]], 32)\n  var bbox = [min[0], min[1], max[0], max[1]]\n\n  var z = getBboxZoom(bbox)\n  if (z === 0) return [0, 0, 0]\n  var x = bbox[0] >>> (32 - z)\n  var y = bbox[1] >>> (32 - z)\n  return [x, y, z]\n}\n\nfunction getBboxZoom (bbox) {\n  var MAX_ZOOM = 28\n  for (var z = 0; z < MAX_ZOOM; z++) {\n    var mask = 1 << (32 - (z + 1))\n    if (((bbox[0] & mask) !== (bbox[2] & mask)) ||\n      ((bbox[1] & mask) !== (bbox[3] & mask))) {\n      return z\n    }\n  }\n\n  return MAX_ZOOM\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///DeP4\n")}}]);